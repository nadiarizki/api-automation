{
  "stats": {
    "suites": 2,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-14T11:07:07.369Z",
    "end": "2024-08-14T11:07:09.874Z",
    "duration": 2505,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d325697d-e87d-4937-b700-e40031a6a2e6",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f7fa6373-72f4-4822-b0e4-2427e338e52e",
          "title": "API Test for \"restful-api.dev\"",
          "fullFile": "D:\\Automation Nad\\api-automation\\test\\test-demo.js",
          "file": "\\test\\test-demo.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test - GET All Objects",
              "fullTitle": "API Test for \"restful-api.dev\" Test - GET All Objects",
              "timedOut": false,
              "duration": 306,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(BASE_URL)\n.get(\"objects\")\n// assertion\nassert.equal(response.statusCode, 200)\nassert.equal(response.body[0].name, \"Google Pixel 6 Pro\")\nassert.equal(response.body[0].data.color, \"Cloudy White\")\nexpect(response.statusCode).to.equal(200)",
              "err": {},
              "uuid": "e0fe86fb-c317-4820-a1c9-4d99d34802bd",
              "parentUUID": "f7fa6373-72f4-4822-b0e4-2427e338e52e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test - POST Store Object",
              "fullTitle": "API Test for \"restful-api.dev\" Test - POST Store Object",
              "timedOut": false,
              "duration": 249,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n    \"name\": \"Ini Request Dari Automation Test\",\n    \"data\": {\n       \"year\": 2019,\n       \"price\": 1849.99,\n       \"CPU model\": \"Intel Core i9\",\n       \"Hard disk size\": \"1 TB\"\n    }\n }\nconst response = await request(BASE_URL)\n.post(\"objects\")\n.send(body)\n\nconsole.log(response.statusCode);\nconsole.log(response.body)\n// assertion\nshould(response.statusCode === 200)\nconst schemaPath = \"resources/jsonSchema/post-object-schema.json\"\nconst jsonSchema = JSON.parse(fs.readFileSync(schemaPath, 'utf8'))\nassert.jsonSchema(response.body, jsonSchema)",
              "err": {},
              "uuid": "ba59ac91-bd11-4729-b76a-c98fc7266e17",
              "parentUUID": "f7fa6373-72f4-4822-b0e4-2427e338e52e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e0fe86fb-c317-4820-a1c9-4d99d34802bd",
            "ba59ac91-bd11-4729-b76a-c98fc7266e17"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 555,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4747f2d2-ed16-4620-b396-e0afeed75693",
          "title": "API for \"reqres.in/api\"",
          "fullFile": "D:\\Automation Nad\\api-automation\\test\\test-tugas.js",
          "file": "\\test\\test-tugas.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Test - View All Users",
              "fullTitle": "API for \"reqres.in/api\" Test - View All Users",
              "timedOut": false,
              "duration": 237,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(\"https://reqres.in/api/\").get('users')\nconsole.log(response.statusCode);\nconsole.log(response.body);\n//assert status code and body\nshould(response.statusCode === 200)\nassert.equal(response.body.data[1].email, \"janet.weaver@reqres.in\")\nexpect(response.body.data[1].first_name).to.equal(\"Janet\")\n// assert json schema\nconst schemaPath = \"resources/jsonSchema/get-user-schema.json\"\nconst jsonSchema = JSON.parse(fs.readFileSync(schemaPath, 'utf8'))\nassert.jsonSchema(response.body, jsonSchema)",
              "err": {},
              "uuid": "9b886694-6097-4e42-bc63-bf1db3ffb9b5",
              "parentUUID": "4747f2d2-ed16-4620-b396-e0afeed75693",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test - Create New User",
              "fullTitle": "API for \"reqres.in/api\" Test - Create New User",
              "timedOut": false,
              "duration": 533,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n    \"name\": \"nadia\",\n    \"job\": \"QA\"\n}\nconst response = await request(BASE_URL)\n.post('users')\n.send(body)\nconsole.log(response.statusCode);\nconsole.log(response.body);\n//assert status code and body\nassert.equal(response.statusCode, 201)\nassert.equal(response.body.job, \"QA\")\n// assert json schema\nconst schemaPath = \"resources/jsonSchema/post-user-schema.json\"\nconst jsonSchema = JSON.parse(fs.readFileSync(schemaPath, 'utf8'))\nassert.jsonSchema(response.body, jsonSchema)",
              "err": {},
              "uuid": "33e28e82-898e-46d6-9cad-ee779e15695f",
              "parentUUID": "4747f2d2-ed16-4620-b396-e0afeed75693",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test - Update User",
              "fullTitle": "API for \"reqres.in/api\" Test - Update User",
              "timedOut": false,
              "duration": 686,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const body = {\n    \"name\": \"nadia\",\n    \"job\": \"QA\"\n}\nconst response = await request(BASE_URL)\n.put('users/7')\n.send(body)\nconsole.log(response.statusCode);\nconsole.log(response.body);\n//asertion json schema\nconst schemaPath = \"resources/jsonSchema/put-user-schema.json\"\nconst jsonSchema = JSON.parse(fs.readFileSync(schemaPath, 'utf8'))\nassert.jsonSchema(response.body, jsonSchema)",
              "err": {},
              "uuid": "1716ed6f-68d1-45fa-a385-a6f65fefcb59",
              "parentUUID": "4747f2d2-ed16-4620-b396-e0afeed75693",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Test - Delete User",
              "fullTitle": "API for \"reqres.in/api\" Test - Delete User",
              "timedOut": false,
              "duration": 465,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(BASE_URL).delete('users/6')\nconsole.log(response.statusCode);\nconsole.log(response.body);\n//assert status code\nshould(response.statusCode === 204)",
              "err": {},
              "uuid": "45161c2d-7c9d-4994-a024-d54545d5e982",
              "parentUUID": "4747f2d2-ed16-4620-b396-e0afeed75693",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9b886694-6097-4e42-bc63-bf1db3ffb9b5",
            "33e28e82-898e-46d6-9cad-ee779e15695f",
            "1716ed6f-68d1-45fa-a385-a6f65fefcb59",
            "45161c2d-7c9d-4994-a024-d54545d5e982"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1921,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}